# -*- coding: utf-8 -*-
"""TechBoy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13s7Yl_F1jbKpQU4mk4iO5Ss--c-z70VT
"""

#TechBoy
def saudacao():
    print("E a√≠, galera! T√¥ chegando com aquela vibe de Bot descolado!")
def mostrar_menu():

    print('\n Qual √© a boa na √°rea da computa√ß√£o que tu t√° querendo desvendar, tirar uma d√∫vida ou mergulhar de cabe√ßa pra aprender mais?')
    print("\n Menuz√£o Tech pra Mandar Bem na Programa√ß√£o!\n")
    print("1. Intro √†s Linguagens de Programa√ß√£o - Pra tu come√ßar a falar a l√≠ngua dos c√≥digos!")
    print("2. L√≥gica da Programa√ß√£o - Descola o jeito de pensar como um dev ninja!")
    print("3. Algoritmos - Cria as f√≥rmulas m√°gicas que fazem tudo acontecer!")
    print("4. Vari√°veis - Domina as caixinhas que guardam os segredos do teu c√≥digo!")
    print("5. Estruturas de Controle - Toma as r√©deas e faz o c√≥digo dan√ßar no teu ritmo!")
    print("6. Fun√ß√µes - Libera o poder de criar teus pr√≥prios superpoderes no c√≥digo!")
    print("7. Escolher uma Linguagem - Acha a tua vibe perfeita no mundo da programa√ß√£o!")
    print("0. Se quiser sair")

def introducao_programacao():
    print("""\nüìò Intro √†s Linguagens de Programa√ß√£o, bora l√°!:
    Programa√ß√£o √© tipo dar um tutorial pro computador, saca?
    √â como se voc√™ fosse explicar, passo a passo, o que ele precisa fazer ‚Äî desde somar 2+2 at√© criar o pr√≥ximo app que vai bombar no TikTok. O computador √© meio ‚Äúliteralz√£o‚Äù, ent√£o voc√™ usa uma linguagem de programa√ß√£o pra falar com ele.
    Cada linguagem tem sua personalidade e √© boa pra algo espec√≠fico, tipo escolher a playlist certa pra cada vibe.
    O que √© linguagem de programa√ß√£o?
    Imagina que o computador √© um gringo que s√≥ entende um idioma mega espec√≠fico. A linguagem de programa√ß√£o √© esse ‚Äúidioma‚Äù que voc√™ usa pra conversar com ele. √â um conjunto de regras e s√≠mbolos que transformam suas ideias em algo que a m√°quina entende. Tipo, se voc√™ quer criar um jogo, um site ou uma IA futurista, cada linguagem tem um jeit√£o que facilita pra cada tipo de projeto. Escolher a certa √© como achar o filtro perfeito pro seu Insta.
    Defini√ß√£o de Linguagem de Programa√ß√£o
    Resumindo a real: linguagens de programa√ß√£o s√£o como dicion√°rios com regras pra voc√™ ‚Äúfalar‚Äù com o PC. Diferente de humanos, que entendem mesmo se voc√™ falar ‚Äúduas caneta‚Äù em vez de ‚Äúduas canetas‚Äù, o computador √© super r√≠gido. Cada linguagem √© feita pra um tipo de rol√™: uma √© top pra apps, outra pra jogos, outra pra an√°lise de dados. √â como ter um dialeto pra cada situa√ß√£o da vida.
    Qual a linguagem de programa√ß√£o mais usada?
    As linguagens mais hypadas mudam com o tempo, mas pra saber quais t√£o bombando, a galera dev sempre d√° uma olhada em rankings tipo o √çndice TIOBE, StackOverflow, StackShare ou o GitHub Octoverse. √â tipo checar o Spotify pra ver qual m√∫sica t√° no topo. Linguagens como Python, JavaScript e Java t√£o sempre na frente, mas a escolha depende do que voc√™ quer criar e do que a comunidade t√° curtindo.
    Estruturas de diferentes linguagens de programa√ß√£o
    As linguagens s√£o divididas em dois squads:
    Alto n√≠vel: S√£o as mais ‚Äúhumanas‚Äù, tipo conversar com um amigo. F√°ceis de escrever, ler e compartilhar. Ex.: Python, Java, JavaScript.
    Baixo n√≠vel: Mais pr√≥ximas do papo da m√°quina (tipo c√≥digo bin√°rio), s√£o r√°pidas e eficientes, mas mais complicadas pra humanos.
    As de alto n√≠vel ainda t√™m subgrupos, dependendo do ‚Äúestilo‚Äù de programa√ß√£o:
    Imperativas: Tipo dar ordens diretas.
    Orientadas a objetos: Organizam o c√≥digo como ‚Äúobjetos‚Äù (pensa em Lego).
    Funcionais: Focam em fun√ß√µes matem√°ticas, tipo resolver equa√ß√µes.
    L√≥gicas: Baseadas em regras l√≥gicas.
    Linguagens como C++, Java, Python e JavaScript s√£o tipo ‚Äúmultitarefa‚Äù (multi-paradigma), porque misturam esses estilos. √â como ser bom em dan√ßar, cantar e atuar.""")

def logica_programacao():
    print("\nüß† L√≥gica de programa√ß√£o:")
    print("""\n O que √© l√≥gica de programa√ß√£o?
	Imagina que voc√™ t√° ensinando um rob√¥ superinteligente a fazer um caf√©. Voc√™ precisa dar o passo a passo: pegar a x√≠cara, colocar o p√≥, ligar a cafeteira... Isso √© l√≥gica de programa√ß√£o! √â o jeito de organizar ideias e criar um conjunto de instru√ß√µes (algoritmos) que o computador entende e executa. √â tipo o c√©rebro por tr√°s de tudo que rola nos apps, jogos e sites que a gente ama.
	O que precisa pra mandar bem?"
	Pra fazer o computador te obedecer (hehe), voc√™ precisa de uma linguagem de programa√ß√£o. √â como o idioma que voc√™ usa pra conversar com a m√°quina. Tem v√°rias op√ß√µes no menu: Python (super vers√°til), JavaScript (o rei do front-end), C, Java, PHP... Cada uma tem seu rol√™ e brilha em diferentes projetos. Escolha a que mais combina com sua vibe e bora codar!
	Exemplos de c√≥digos e algoritmos
	T√° na hora de ver a l√≥gica ganhando vida! Vamos usar o cl√°ssico exemplo de calcular a m√©dia de tr√™s notas e dizer se o aluno passou ou n√£o. Primeiro, em Python, porque √© tipo o melhor amigo de quem t√° come√ßando:

	Python:
	# Calculando a m√©dia das notas
	# Pegando as notas
	nota1 = float(input("Joga a primeira nota a√≠: "))
	nota2 = float(input("Agora a segunda: "))
	nota3 = float(input("E a terceira, capricha: "))

	# Calculando a m√©dia
	media = (nota1 + nota2 + nota3) / 3

	# Verificando se passou (6 √© o corte, bora torcer!)
	if media >= 6:
    print("Aprovado! T√¥ orgulhoso, parab√©ns! ")
	else:
    print("Reprovado... Mas vamo tentar de novo, tu consegue! ")

	# Mostrando a m√©dia com estilo
	print(f"A m√©dia foi: {media:.2f}")

	Agora, olha s√≥ como o mesmo algoritmo fica em JavaScript, pra quem curte aquele clima de web dev:

	JavaScript:
	// Calculando m√©dia com aquele toque de front-end
	let nota1 = parseFloat(prompt("Digita a primeira nota:"));
	let nota2 = parseFloat(prompt("Agora a segunda:"));
	let nota3 = parseFloat(prompt("E a terceira, vai com tudo:"));

	let media = (nota1 + nota2 + nota3) / 3;
	if (media >= 6) {
    console.log("Aprovado, tu arrasou!");
	} else {
    console.log("Reprovado, mas √© s√≥ um perrengue, vamo melhorar!");
	}
	console.log(`M√©dia: ${media.toFixed(2)}`);

	Viu? O algoritmo √© o mesmo (pegar notas, calcular m√©dia, verificar aprova√ß√£o), mas cada linguagem tem seu jeitinho de contar a hist√≥ria. A l√≥gica √© o cora√ß√£o, e a linguagem √© s√≥ a ferramenta que voc√™ escolhe pra fazer o bagulho acontecer!
	Por que isso √© t√£o f***?
	L√≥gica de programa√ß√£o √© o superpoder que transforma ideias em realidade. Quer criar o pr√≥ximo TikTok, um game insano ou um app que resolve a vida das pessoas? Tudo come√ßa com um algoritmo bem bolado e uma linguagem que te d√° aquele match perfeito. √â o futuro, e voc√™ pode ser o protagonista dessa revolu√ß√£o tech!""")

def algoritmos():
    print("\nüîÅ Algoritmos:")
    print("""\n Tipo, tudo que a gente faz no dia a dia tem uma vibe de passo a passo, sabe? √â como se fosse uma coreografia que a gente dan√ßa sem nem perceber. Quer ver? Pensa em fazer um bolo del√≠cia: tu pega os ingredientes, mistura tudo, joga na forma, leva pro forno e tcharam! Sai um bolo quentinho. üç∞ Cada um tem seu jeitinho de fazer, mas no fundo, √© uma sequ√™ncia l√≥gica que te leva pro goal.
	Agora, quando o papo √© programar, essa l√≥gica vira o mood principal. Computadores n√£o s√£o como a gente, que entende no vibe. Eles precisam de um GPS bem certinho, tipo: 'faz isso, depois aquilo, e n√£o pula nada!'. Essa sequ√™ncia organizada √© o que chamamos de l√≥gica de programa√ß√£o, e o mapinha pra chegar l√° √© o algoritmo. √â tipo o tutorial perfeito pra qualquer miss√£o!
	O que √© um algoritmo, afinal?
	√â basicamente uma lista de passos pra alcan√ßar um objetivo. Pode ser desde atravessar a rua, fazer um bolo ou decidir se um aluno passou de ano. √â o hack pra resolver problemas de boa!
	Como criar um algoritmo?
	Antes de sair codando, tu precisa planejar direitinho: o que precisa ser feito? Como? √â tipo montar um moodboard antes de criar algo. A√≠ tu escreve o passo a passo, testa pra ver se funciona e s√≥ depois escolhe a linguagem de programa√ß√£o pra dar vida ao teu plano.
	Como representar um algoritmo?
	Tem v√°rias formas de botar isso no papel (ou na tela):")
	‚Ä¢ Narrativa: tu escreve a sequ√™ncia como se fosse uma hist√≥ria. Exemplo: calcular a m√©dia de um aluno. Pega as notas de 3 bimestres, soma, divide por 3, e v√™ se √© maior ou igual a 7. Aprovado? Reprovado? Simples!
	‚Ä¢ Fluxograma: √© tipo um mapa visual, com setinhas e caixinhas, bem aesthetic.
	‚Ä¢ Pseudo-c√≥digo: aqui tu escreve em portugu√™s, mas j√° com uma carinha de c√≥digo, sem ser super r√≠gido.
	Olha s√≥: Pseudo-c√≥digo
	Algoritmo CalcularMedia
	Ler Nota1, Nota2, Nota3
	Media = (Nota1 + Nota2 + Nota3) / 3
	Se Media >= 7 ent√£o
	Print "Aprovado, parab√©ns!"
	Sen√£o
		Print "Reprovado, vamo tentar de novo? "
		Print "Sua m√©dia foi: ", Media
	Fim

	Resumindo a vibe: Algoritmos s√£o tipo playlists de passos que guiam a gente (ou o PC) at√© o resultado. √â planejar, organizar e executar com aquele toque de criatividade. Bora dominar essa l√≥gica e criar coisas incr√≠veis?")
	print("Exemplo: para fazer um caf√©, voc√™ segue passos como aquecer a √°gua, colocar o p√≥, coar, etc.""")

def variaveis():
    print("\nüì¶ Vari√°veis:")
    print("""\n Guia das Vari√°veis: A Caixinha M√°gica da Programa√ß√£o!")
	Imagina uma vari√°vel como uma caixinha estilosa na mem√≥ria do teu PC ou celular, tipo um ba√∫ m√°gico que guarda coisas iradas: pode ser um n√∫mero, um text√£o, uma vibe verdadeira ou falsa, ou at√© uns dados mais complexos que s√£o tipo o pr√≥ximo n√≠vel do game. O nome 'vari√°vel' j√° entrega: ela √© flex, mut√°vel, pode trocar de conte√∫do quando tu quiser, saca?
	Desenrolando a ideia:
	‚Ä¢ Guarda as paradas: Vari√°veis s√£o tipo o HD do teu programa, salvando tudo que tu precisa pra fazer a m√°gica acontecer.
	‚Ä¢ Codinome maneiro: Cada vari√°vel tem um nome pra tu chamar ela, tipo um apelido que te leva direto pro que t√° guardado.
	‚Ä¢ V√°rios sabores: Elas seguram todo tipo de dado ‚Äì n√∫meros inteiros, n√∫meros com v√≠rgula, frases, emojis, true or false, e at√© uns objetos que s√£o tipo naves espaciais de dados.
	‚Ä¢ Troca de figurinha: O que t√° na vari√°vel pode mudar no meio do rol√™. Tipo, come√ßou com um valor e, de repente, √© outro, sem drama.
	‚Ä¢ Exemplo na real: Quer guardar o nome de algu√©m? Cria uma vari√°vel chamada 'nome' e joga 'Jo√£o' l√°. Depois, se quiser, troca pra 'Maria' e t√° de boa.
	Tipos de vari√°veis:
	As vari√°veis podem ser de v√°rios tipos, dependendo do que voc√™ quer guardar:
	‚Ä¢ Inteiros: n√∫meros inteiros (ex.: 10, -5)
	‚Ä¢ Flutuantes: n√∫meros com casas decimais (ex.: 3.14, -0.5)
	‚Ä¢ Strings: textos (ex.: 'Ol√°, mundo!')
	‚Ä¢ Booleanos: verdadeiro ou falso (ex.: True ou False)
	Resumindo a treta: Vari√°vel √© aquele espacinho na mem√≥ria que segura um valor pra teu programa usar, remexer ou dar um confere.""")
    print("Exemplo em Python: idade = 25")

def estruturas_controle():
    print("\nüß© Estruturas de controle:")
    print("""\n Estruturas de Controle: O GPS do C√≥digo!
  Imagina que voc√™ t√° dirigindo e precisa decidir se vira √† esquerda ou √† direita. As estruturas de controle s√£o tipo o GPS do teu c√≥digo, ajudando a tomar decis√µes e seguir caminhos diferentes dependendo do que rola. Elas s√£o essenciais pra fazer o programa funcionar direitinho, sem ficar perdido no meio do caminho.
	O que s√£o estruturas de controle?

	S√£o comandos que ajudam a controlar o fluxo do programa, decidindo quais partes do c√≥digo v√£o ser executadas dependendo de certas condi√ß√µes ou repeti√ß√µes.

	Resumo com vibe vision√°ria:
	Imagina um app banc√°rio que n√£o s√≥ gerencia teu dinheiro, mas te d√° aquele empowerment pra tomar decis√µes financeiras com confian√ßa. Pra isso, precisamos de l√≥gica condicional: se o saldo da conta for suficiente, o saque rola de boa; se n√£o, o app te avisa com jeitinho, tipo 'ops, saldo t√° de boa, mas n√£o pra esse saque'. Em Python, usamos if e else pra fazer isso acontecer, com uma sintaxe clean que deixa tudo mais intuitivo. Al√©m disso, podemos brincar com condi√ß√µes mais complexas usando operadores como and e or, criando regras que s√£o tipo o GPS das nossas decis√µes no c√≥digo. O futuro? √â um c√≥digo que n√£o s√≥ funciona, mas conversa com o usu√°rio e torna a experi√™ncia fluida e humana.
	Plano pro c√≥digo
	1. Pegar o exemplo do C# e passar pra Python, mantendo a l√≥gica de verificar o saldo antes do saque.
	2. Substituir MessageBox.Show por print, j√° que Python √© mais sobre console ou interfaces custom.
	3. Traduzir os operadores l√≥gicos (&& vira and, || vira or) e simplificar a sintaxe.
	4. Adicionar um toque de modernidade com mensagens mais descontra√≠das.
	5. Mostrar como usar vari√°veis booleanas pra deixar o c√≥digo mais leg√≠vel e reutiliz√°vel.

	Exemplo em Python:
	saldo = 100.0
	valor_saque = 10.0

	# Verifica se o saque √© poss√≠vel e se o valor √© positivo
	pode_sacar = (saldo >= valor_saque) and (valor_saque > 0)

    if pode_sacar:
      saldo -= valor_saque
	print("Saque no capricho! Novo saldo:", saldo)
    else:
	print("Ops, saldo t√° meio t√≠mido pra esse saque!")

	Como usar e por que √© tudo
	Esse c√≥digo √© tipo um mood: simples, direto e com uma vibe que conecta. Voc√™ pode rodar ele no seu editor Python favorito (tipo VS Code ou PyCharm) ou at√© num Jupyter Notebook pra testar rapidinho. A vari√°vel pode_sacar √© um bool que mistura duas condi√ß√µes com and, garantindo que o saque s√≥ rola se o saldo for suficiente e o valor do saque for maior que zero. Isso √© tipo ter um filtro de seguran√ßa que deixa teu app mais confi√°vel.""")
    print("/Exemplos: if/else para condi√ß√µes, while/for para repeti√ß√µes.")

def funcoes():
    print("\nüõ†Ô∏è Fun√ß√µes:")
    print("""\nO que s√£o fun√ß√µes?
	Fun√ß√µes s√£o blocos de c√≥digo que realizam uma tarefa espec√≠fica. Elas podem receber dados (par√¢metros), process√°-los e devolver um resultado (retorno). √â como ter uma caixa m√°gica que transforma ingredientes em um prato delicioso!
	Como criar uma fun√ß√£o?
	Pra criar uma fun√ß√£o, voc√™ precisa definir o nome dela, os par√¢metros (se houver) e o que ela vai fazer. Depois, √© s√≥ chamar a fun√ß√£o quando precisar. √â tipo ter um bot√£o m√°gico que ativa o superpoder sempre que voc√™ quiser!
	Exemplo de fun√ß√£o em Python:
	def calcular_media(nota1, nota2, nota3):
	media = (nota1 + nota2 + nota3) / 3
		return media
	# Chamando a fun√ß√£o
	media_aluno = calcular_media(7, 8, 9)
	print("A m√©dia do aluno √©:", media_aluno)
	Nesse exemplo, a fun√ß√£o calcular_media recebe tr√™s notas, calcula a m√©dia e devolve o resultado. Voc√™ pode chamar essa fun√ß√£o quantas vezes quiser, com notas diferentes, e sempre vai ter a m√©dia na m√£o!
	Por que usar fun√ß√µes?
	Fun√ß√µes ajudam a deixar o c√≥digo mais organizado e f√°cil de entender. Elas evitam repeti√ß√µes desnecess√°rias e permitem que voc√™ reutilize o mesmo c√≥digo em diferentes partes do programa. Al√©m disso, se precisar fazer uma mudan√ßa, √© s√≥ atualizar a fun√ß√£o e pronto! √â como ter um assistente pessoal que cuida de tudo pra voc√™.

	Fun√ß√µes s√£o o superpoder do c√≥digo! Elas ajudam a organizar, reutilizar e tornar tudo mais leg√≠vel. Ent√£o, bora usar essa magia na programa√ß√£o e criar coisas incr√≠veis juntos!""")

def linguagens_existentes():
    print("\nüåê Linguagens de programa√ß√£o existentes:")
    print("Python: F√°cil e popular, vers√°til e conhecida pela sua facilidade de uso e ampla aplica√ß√£o em diversas √°reas, incluindo ci√™ncia de dados, desenvolvimento web, automa√ß√£o e intelig√™ncia artificial.")
    print("   - Documenta√ß√£o oficial: https://docs.python.org/3/")
    print("   - Curso gratuito: https://www.cursoemvideo.com/course/python-3-mundo-1/")

    print("JavaScript: Popular e f√°cil de aprender, amplamente utilizada em desenvolvimento web para adicionar interatividade e dinamismo aos sites. Al√©m do desenvolvimento web, JavaScript tamb√©m √© usado em diversas outras √°reas, como automa√ß√£o de tarefas e cria√ß√£o de aplicativos.")
    print("   - Documenta√ß√£o oficial: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript")
    print("   - Curso gratuito: https://www.cursoemvideo.com/course/javascript/")

    print("Java: √â uma linguagem de programa√ß√£o amplamente utilizada, reconhecida pela sua popularidade no mercado de trabalho e em diversas √°reas de desenvolvimento. Embora possa ser considerada mais complexa para iniciantes, a sua versatilidade e presen√ßa em projetos web, aplicativos Android e outras aplica√ß√µes a tornam uma linguagem essencial.")
    print("   - Documenta√ß√£o oficial: https://docs.oracle.com/en/java/")
    print("   - Curso gratuito: https://www.cursoemvideo.com/course/java-basico/")

    print("C++: √â uma vers√£o ampliada e modificada do C, que inclui orienta√ß√£o a objetos e outros recursos adicionais. √â amplamente utilizada em jogos, sistemas de baixo n√≠vel.")
    print("   - Documenta√ß√£o: https://en.cppreference.com/w/")
    print("   - Curso introdut√≥rio: https://www.youtube.com/watch?v=cmFvLJPJbC4")

    print("Outras: C#, Ruby, Go, Swift, PHP, etc.")
    print("   - Vis√£o geral: https://roadmap.sh/")


# Execu√ß√£o do TechBoy
saudacao()
nome = (input("Qual √© o teu primeiro nome? ")).capitalize()
print(f"Eae, {nome}!")
while True:
    mostrar_menu()
    try:
        escolha = int(input("\nDigite o n√∫mero da op√ß√£o que tu t√° querendo matar a curiosidade: "))

        if escolha == 1:
            introducao_programacao()
        elif escolha == 2:
            logica_programacao()
        elif escolha == 3:
            algoritmos()
        elif escolha == 4:
            variaveis()
        elif escolha == 5:
            estruturas_controle()
        elif escolha == 6:
            funcoes()
        elif escolha == 7:
            linguagens_existentes()
        elif escolha == 0:
            print("\nüëã Massa que voc√™ usou o TechBot! Nos vemos na pr√≥xima, valeu? Se precisar de mais ajuda, √© s√≥ chamar.")
            break
        else:
            print("\n‚ö†Ô∏è Ops, essa op√ß√£o n√£o rola. Tenta um n√∫mero do menu, vai!")
    except ValueError:
        print("\nüö´ Calma, s√≥ n√∫meros inteiros, t√°? Nada de letras ou emojis aqui! Voc√™ consegue, confia!")